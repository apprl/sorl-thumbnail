# -*- coding: utf-8 -*-
# Django settings for production-v2 server

import os.path
import logging
import logging.config

from settings_common import *
DEBUG = True
EMAIL_DEBUG = True

#SERVER_APP_ROOT = os.path.join(PROJECT_ROOT, '..')

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'apparel',
        'USER': 'apparel',
        'PASSWORD': '0p1a7IUmE6NU',
        'HOST': 'apprldbinstance.cirbmil58ncc.us-east-1.rds.amazonaws.com',
        'PORT': '5432'
    }
}
CONN_MAX_AGE = 600

# Storage
STATIC_URL = 'http://s-staging.apprl.com/'
AWS_STORAGE_BUCKET_NAME = AWS_BUCKET_NAME = AWS_S3_CUSTOM_DOMAIN = 's-staging.apprl.com'

APPAREL_DECOMPRESS_UTILS = {
    'gzip': '/bin/gunzip',
    'zip':  '/bin/zip',
}

CACHE_MIDDLEWARE_KEY_PREFIX = 'ar'
CACHE_MIDDLEWARE_SECONDS = 120

SOLR_URL = 'http://ip-10-0-1-247.ec2.internal:8983/solr'
SOLR_CURRENCY_LOCAL = False
SOLR_SSH_STRING = 'deploy@ip-10-0-1-247.ec2.internal'
SOLR_CURRENCY_FILE = os.path.join('/home', 'deploy', 'solr', 'solr', 'example', 'solr', 'collection1', 'conf', 'currency.xml')


THEIMP_REDIS_HOST = 'ip-10-0-1-249.ec2.internal'
THEIMP_REDIS_PORT = 6380

BROKER_URL = "redis://ip-10-0-1-249.ec2.internal:6380/0"
CELERY_RESULT_BACKEND = "redis"
CELERY_REDIS_HOST = "ip-10-0-1-249.ec2.internal"
CELERY_REDIS_PORT = 6380
CELERY_REDIS_DB = 0
CELERYBEAT_SCHEDULER = "djcelery.schedulers.DatabaseScheduler"
CELERY_ALWAYS_EAGER=False
CELERY_TIMEZONE = 'Europe/Stockholm'

import djcelery
djcelery.setup_loader()

# --- Application wide init code goes here. 
# It would be nice to move this somewhere, but I'm not sure where to put it
# to ensure it is executed only *once* and after all settings has been evaluated

#RAVEN_CONFIG = {
#    'dsn': 'https://1e617fbfbbf2401ca29dd489b87f7b5a:c170b6488efb41618aaa46b49f79ddef@sentry.wordex.se/11',
#}
#
#SENTRY_DSN='https://1e617fbfbbf2401ca29dd489b87f7b5a:c170b6488efb41618aaa46b49f79ddef@sentry.wordex.se/11'

# Locale paths
LOCALE_PATHS = (
    os.path.join(SERVER_APP_ROOT,'locale'),
)

#INSTALLED_APPS += ('django-postgrespool',)

# CACHE CONFIGURATION AWS
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': 'apparel-cache.uhyk4j.cfg.euw1.cache.amazonaws.com:11211',
        'TIMEOUT': 60 * 60 * 12,
    },
    'nginx': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': 'apparel-cache.uhyk4j.cfg.euw1.cache.amazonaws.com:11211',
        'TIMEOUT': 60 * 60 * 24 * 20,
        'KEY_FUNCTION': lambda key, x, y: key,
    },
}

# LOGGING CONFIGURATION
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    #'root': {
    #    'level': 'DEBUG',
    #    'handlers': ['sentry'],
    #},

    'formatters': {
        'simple': {
            'format': '%(asctime)s %(name)s %(levelname)s %(message)s'
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
#        'sentry': {
#            'level': 'WARNING',
#            'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
#        },
        'null': {
            'level': 'DEBUG',
            'class': 'django.utils.log.NullHandler',
        },
        'console': {
            'level': 'NOTSET',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'stream': sys.stdout
        },
        'app_core': {
            'level': 'NOTSET',
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'simple',
            'filename': os.path.join(SERVER_APP_ROOT,'..' , 'logs', 'app_logger.log'),
            'maxBytes': 3000000,
            'backupCount': 8
        },
        'apparel_debug': {
            'level': 'NOTSET',
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'simple',
            'filename': os.path.join(SERVER_APP_ROOT,'..' , 'logs', 'apparel_debug.log'),
            'maxBytes': 3000000,
            'backupCount': 8
        },
        'importer': {
            'level': 'NOTSET',
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'simple',
            'filename': os.path.join(SERVER_APP_ROOT,'..' , 'logs', 'importer.log'),
            'maxBytes': 8000000,
            'backupCount': 10
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
        },
        'dashboard': {
            'level': 'NOTSET',
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'simple',
            'filename': os.path.join(SERVER_APP_ROOT,'..' , 'logs', 'dashboard.log'),
            'maxBytes': 3000000,
            'backupCount': 8,
        },
        'theimp': {
            'level': 'NOTSET',
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'simple',
            'filename': os.path.join(SERVER_APP_ROOT,'..' , 'logs', 'theimp.log'),
            'maxBytes': 50000000,
            'backupCount': 10,
        },
    },
    'loggers': {
        '': {
            'level': 'INFO',
            'propagate': True,
            'handlers': ['app_core'],
        },
        'requests': {
            'level': 'DEBUG',
            'propagate': False,
            'handlers': ['app_core'],
        },
        'pysolr': {
            'level': 'ERROR',
            'propagate': False,
            'handlers': ['app_core'],
        },
        'django': {
            'level': 'INFO',
            'propagate': True,
            'handlers': ['app_core'],
        },
        'django.request': {
            'level': 'ERROR',
            'propagate': False,
            'handlers': ['mail_admins', 'app_core'],
        },
        'apparel.debug': {
            'level': 'DEBUG',
            'propagate': False,
            'handlers': ['apparel_debug'],
        },
        'advertiser': {
            'level': 'ERROR',
            'propagate': False,
            'handlers': ['app_core'],
        },
        'apparel.importer': {
            'level': 'INFO',
            'propagate': False,
            'handlers': ['importer', 'console'],
        },
        'dashboard': {
            'level': 'DEBUG',
            'propagate': False,
            'handlers': ['dashboard'],
        },
        'theimp': {
            'level': 'DEBUG',
            'propagate': True,
            'handlers': ['theimp'],
        },
    }
}

#ALLOWED_HOSTS = ['web-aws2.apprl.com','apprl.com']